[{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://b-rodrigues.github.io/chronicler/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://b-rodrigues.github.io/chronicler/articles/a-non-mathematician-s-introduction-to-monads.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A non-mathematician's introduction to monads","text":"vignette introduces functional programming concept monad, without going much technical detail. {chronicler} implementation logger monad, truth, necessary know monads use package. However, curious, read . monad computation device offers two things: possibility decorate functions can provide additional output without touch function’s core implementation; way compose decorated functions; (definition oversimplification actual definition monad, good enough purposes.) understand monad , believe useful explain sort problem monads solve. Suppose instance wish functions provide log ’re run. function looks like : need rewrite function like : two problems implementation: need rewrite every function need use provide logs; functions don’t compose. mean “functions don’t compose”? Consider another function my_log(): sqrt() log() compose, rather, can chained: true my_sqrt() my_log(): my_log() expects number, list my_sqrt() returns. “monad” need solve two problems. first problem, rewrite every function, can tackled using function factories. Let’s write one problem: can now create functions easily: can call l_sqrt() l_log() decorated functions values return monadic values. second issue remains though; l_sqrt() l_log() can’t composed/chained. solve issue, need another function, called bind(): Using bind(), now possible compose l_sqrt() l_log(): bind() takes care providing right arguments underlying function. can check result correct comparing $result value returned object log(sqrt(10)): solution using function factory defining helper function make decorated functions compose constitutes monad, strictly speaking, precisely correct. can interesting see actual definition programming language Haskell, pure functional programming language monads must used solve certain issues: (Source: Monad) definition quite cryptic, especially don’t know Haskell, means Monad (Haskell) something three methods: >>= called bind(); >> didn’t bother implementing, ’s really needed understanding monad ; return. Don’t confused name, nothing return() use inside functions return value. return function wraps (converts) value monadic value, consider object , return takes input returns monadic value m . didn’t implement return (also called unit, also good name), function factory log_it() return/unit’s job returns m f() instead m . Using function factories comes naturally R users using return/unit, hence focus return/unit. Also, using function factory, easy implement return/unit: return/unit just identity() function went function factory. sense, function factory even necessary defining monad return/unit. Finally, might read sometimes monads objects flatmap() method. think definition well strictly correct likely oversimplification. flatmap() anyways? practical terms, equivalent bind(), get ’s different. implement flatmap() two additional functions needed: fmap() flatten() (quite often called join(), nothing joining data frames, used flatten() instead). fmap() function takes monadic value argument undecorated function applies undecorated function monadic value: Let’s first define monadic value: Let’s now use fmap() apply non-decorated function m: Great, now flatten() (join())? useful? Suppose instead log() used l_log() fmap() (’re using decorated function instead undecorated one): can see output, produced nested list, monadic value value monadic value. like flatten()/join() take care us. implementation flatten(): Let’s try now: Great! Now, explained earlier, flatmap() bind() thing. implemented flatten() fmap(), two functions relate flatmap()? turns flatmap() composition flatten() fmap(): means can now replace: : get result (well, quite, since log different). prefer introducing monads using bind(), bind() comes natural solution problem decorated functions composing. flatmap(), applications might easier first define flatten() join() get flatmap() instead trying write bind() directly, ’s good know approaches. continuing final part introduction, just want share lists also monads. everything need: .list() unit(), purrr::map() fmap() purrr::flatten() flatten(). means can obtain flatmap() composing purrr::flatten() purrr::map(): (thanks @armcn_ showing ) sum, monads useful need values also carry something . something can log, shown , many examples. another example monad implemented R package, see maybe monad. {chronicle} actually takes advantage maybe package uses maybe monad handle cases functions fail. provide short introduction maybe monad Maybe monad vignette.","code":"my_sqrt <- function(x){    sqrt(x)  } my_sqrt <- function(x, log = \"\"){    list(sqrt(x),        c(log,          paste0(\"Running sqrt with input \", x)))  } my_log <- function(x, log = \"\"){    list(log(x),        c(log,          paste0(\"Running log with input \", x)))  } 10 |>   sqrt() |>   log() #> [1] 1.151293 10 |>   my_sqrt() |>   my_log() Error in log(x) (from #3) : non-numeric argument to mathematical function log_it <- function(.f, ..., log = NULL){    fstring <- deparse(substitute(.f))    function(..., .log = log){      list(result = .f(...),          log = c(.log,                  paste0(\"Running \", fstring, \" with argument \", ...)))   } } l_sqrt <- log_it(sqrt)  l_sqrt(10) #> $result #> [1] 3.162278 #>  #> $log #> [1] \"Running sqrt with argument 10\"  l_log <- log_it(log)  l_log(10) #> $result #> [1] 2.302585 #>  #> $log #> [1] \"Running log with argument 10\" bind <- function(.l, .f, ...){    .f(.l$result, ..., .log = .l$log)  } 10 |>   l_sqrt() |>   bind(l_log) #> $result #> [1] 1.151293 #>  #> $log #> [1] \"Running sqrt with argument 10\"              #> [2] \"Running log with argument 3.16227766016838\" log(sqrt(10)) #> [1] 1.151293 class Monad m where   (>>=)  :: m a -> (  a -> m b) -> m b   (>>)   :: m a ->  m b         -> m b   return ::   a                 -> m a unit <- log_it(identity) fmap <- function(m, f, ...){    fstring <- deparse(substitute(f))    list(result = f(m$result, ...),        log = c(m$log,                paste0(\"fmapping \", fstring, \" with arguments \", paste0(m$result, ..., collapse = \",\")))) } # Let’s use unit(), which we defined above, for this.  (m <- unit(10)) #> $result #> [1] 10 #>  #> $log #> [1] \"Running identity with argument 10\" fmap(m, log) #> $result #> [1] 2.302585 #>  #> $log #> [1] \"Running identity with argument 10\" \"fmapping log with arguments 10\" fmap(m, l_log) #> $result #> $result$result #> [1] 2.302585 #>  #> $result$log #> [1] \"Running log with argument 10\" #>  #>  #> $log #> [1] \"Running identity with argument 10\" \"fmapping l_log with arguments 10\" flatten <- function(m){    list(result = m$result$result,        log = c(m$log))  } flatten(fmap(m, l_log)) #> $result #> [1] 2.302585 #>  #> $log #> [1] \"Running identity with argument 10\" \"fmapping l_log with arguments 10\" # I first define a composition operator for functions `%.%` <- \\(f,g)(function(...)(f(g(...))))  # I now compose flatten() and fmap() # flatten %.% fmap is read as \"flatten after fmap\" flatmap <- flatten %.% fmap 10 |>   l_sqrt() |>   bind(l_log) #> $result #> [1] 1.151293 #>  #> $log #> [1] \"Running sqrt with argument 10\"              #> [2] \"Running log with argument 3.16227766016838\" 10 |>   l_sqrt() |>   flatmap(l_log) #> $result #> [1] 1.151293 #>  #> $log #> [1] \"Running sqrt with argument 10\"                  #> [2] \"fmapping l_log with arguments 3.16227766016838\" # Since I'm using `{purrr}`, might as well use purrr::compose() instead of my own implementation flatmap_list <- purrr::compose(purrr::flatten, purrr::map)  # Functions that return lists: they don't compose! # no worries, we implemented `flatmap_list()` list_sqrt <- \\(x)(as.list(sqrt(x))) list_log <- \\(x)(as.list(log(x)))  10 |>   list_sqrt() |>   flatmap_list(list_log) #> [[1]] #> [1] 1.151293"},{"path":"https://b-rodrigues.github.io/chronicler/articles/a-non-mathematician-s-introduction-to-monads.html","id":"monadic-laws","dir":"Articles","previous_headings":"","what":"Monadic laws","title":"A non-mathematician's introduction to monads","text":"Monads need satisfy -called “monadic laws”. ’re going verify monad implemented {chronicler} satisfies monadic laws.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/articles/a-non-mathematician-s-introduction-to-monads.html","id":"first-law","dir":"Articles","previous_headings":"Monadic laws","what":"First law","title":"A non-mathematician's introduction to monads","text":"first law states passing monadic value monadic function using bind() (case {chronicler} package bind_record()) passing value monadic function . Turns quite case ; logs two objects slightly different. check value.","code":"a <- as_chronicle(10) r_sqrt <- record(sqrt)  test_that(\"first monadic law\", {   expect_equal(bind_record(a, r_sqrt)$value, r_sqrt(10)$value) }) #> Test passed"},{"path":"https://b-rodrigues.github.io/chronicler/articles/a-non-mathematician-s-introduction-to-monads.html","id":"second-law","dir":"Articles","previous_headings":"Monadic laws","what":"Second law","title":"A non-mathematician's introduction to monads","text":"second law states binding monadic value return() (called as_chronicle() package, words, function coerces values chronicler objects) nothing. issue log, ’s focus value:","code":"test_that(\"second monadic law\", {   expect_equal(bind_record(a, as_chronicle)$value, a$value) }) #> Test passed"},{"path":"https://b-rodrigues.github.io/chronicler/articles/a-non-mathematician-s-introduction-to-monads.html","id":"third-law","dir":"Articles","previous_headings":"Monadic laws","what":"Third law","title":"A non-mathematician's introduction to monads","text":"third law associativity; applying monadic functions successively composing first gives result.","code":"a <- as_chronicle(10)  r_sqrt <- record(sqrt) r_exp <- record(exp) r_mean <- record(mean)  test_that(\"third monadic law\", {   expect_equal(   (     (bind_record(a, r_sqrt)) |>    bind_record(r_exp)   )$value,   (     a |>     (\\(x) bind_record(x, r_sqrt) |> bind_record(r_exp))()   )$value   ) }) #> Test passed"},{"path":"https://b-rodrigues.github.io/chronicler/articles/a-non-mathematician-s-introduction-to-monads.html","id":"flatmap-for-chronicle-objects","dir":"Articles","previous_headings":"","what":"flatmap() for chronicle objects","title":"A non-mathematician's introduction to monads","text":"exhaustivity’s sake, check can get flatmap_record() composing flatten_record() fmap_record():","code":"r_sqrt <- record(sqrt) r_exp <- record(exp) r_mean <- record(mean)  a <- 1:10 |>   r_sqrt() |>   bind_record(r_exp) |>   bind_record(r_mean)  flatmap_record <- purrr::compose(flatten_record, fmap_record)  b <- 1:10 |>   r_sqrt() |>   flatmap_record(r_exp) |>   flatmap_record(r_mean)  identical(a$value, b$value) #> [1] TRUE"},{"path":"https://b-rodrigues.github.io/chronicler/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bruno Rodrigues. Author, maintainer, copyright holder. Matouš Eibich. Contributor.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rodrigues B (2024). chronicler: Add Logging Functions. R package version 0.2.1.9999.","code":"@Manual{,   title = {chronicler: Add Logging To Functions},   author = {Bruno Rodrigues},   year = {2024},   note = {R package version 0.2.1.9999}, }"},{"path":"https://b-rodrigues.github.io/chronicler/index.html","id":"chronicler-","dir":"","previous_headings":"","what":"Add Logging To Functions","title":"Add Logging To Functions","text":"Easily add logs functions, without interfering global environment.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Add Logging To Functions","text":"package available CRAN. Install : can install development version GitHub :","code":"install.packages(\"chronicler\") # install.packages(\"devtools\") devtools::install_github(\"b-rodrigues/chronicler\")"},{"path":"https://b-rodrigues.github.io/chronicler/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Add Logging To Functions","text":"{chronicler} provides record() function, allows modify functions provide enhanced output. enhanced output consists detailed log, chaining decorated functions, becomes possible complete trace operations led final output. decorated functions work exactly undecorated counterparts, care required correctly handling . introduction give quick overview package’s functionality. Let’s first start simple example, decorating sqrt() function: Object now object class chronicle. Let’s take closer look : now made several parts. first part: simply provides result sqrt() applied 1:5 (let’s ignore word Just third line now; details see Maybe Monad vignette). second part tells ’s : value sqrt() function applied arguments can obtained using pick(), explained: log also gets generated can read using read_log(): especially useful objects get created using multiple calls: (bind_record() used chain multiple decorated functions explained detail next section.) record() works function, yet ggplot2. avoid define every function individually, like : can use record_many() function. record_many() takes list functions (strings) input puts generated code system’s clipboard. can paste code text editor. gif illustrates record_many() works:","code":"library(chronicler)  r_sqrt <- record(sqrt)  a <- r_sqrt(1:5) a #> OK! Value computed successfully: #> --------------- #> Just #> [1] 1.000000 1.414214 1.732051 2.000000 2.236068 #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). OK! Value computed successfully: --------------- Just [1] 1.000000 1.414214 1.732051 2.000000 2.236068 --------------- This is an object of type `chronicle`. Retrieve the value of this object with pick(.c, \"value\"). To read the log of this object, call read_log(). pick(a, \"value\") #> [1] 1.000000 1.414214 1.732051 2.000000 2.236068 read_log(a) #> [1] \"Complete log:\"                                             #> [2] \"OK! sqrt() ran successfully at 2024-02-12 16:23:04.643557\" #> [3] \"Total running time: 0.00085902214050293 secs\" r_sqrt <- record(sqrt) r_exp <- record(exp) r_mean <- record(mean)  b <- 1:10 |>   r_sqrt() |>   bind_record(r_exp) |>   bind_record(r_mean) read_log(b) #> [1] \"Complete log:\"                                             #> [2] \"OK! sqrt() ran successfully at 2024-02-12 16:23:04.711671\" #> [3] \"OK! exp() ran successfully at 2024-02-12 16:23:04.711546\"  #> [4] \"OK! mean() ran successfully at 2024-02-12 16:23:04.711434\" #> [5] \"Total running time: 0.0204756259918213 secs\"  pick(b, \"value\") #> [1] 11.55345 r_sqrt <- record(sqrt) r_exp <- record(exp) r_mean <- record(mean)"},{"path":"https://b-rodrigues.github.io/chronicler/index.html","id":"chaining-decorated-functions","dir":"","previous_headings":"","what":"Chaining decorated functions","title":"Add Logging To Functions","text":"bind_record() used pass output one decorated function next: value can accessed worked usual using pick(), explained : package also ships dedicated pipe, %>=% can use instead bind_record(): Using %>=% recommended non-interactive sessions bind_record() recommend settings.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:chronicler': #>  #>     pick #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)  r_group_by <- record(group_by) r_select <- record(select) r_summarise <- record(summarise) r_filter <- record(filter)  output <- starwars %>%   r_select(height, mass, species, sex) %>%   bind_record(r_group_by, species, sex) %>%   bind_record(r_filter, sex != \"male\") %>%   bind_record(r_summarise,               mass = mean(mass, na.rm = TRUE)               ) read_log(output) #> [1] \"Complete log:\"                                                                          #> [2] \"OK! select(height,mass,species,sex) ran successfully at 2024-02-12 16:23:05.76115\"      #> [3] \"OK! group_by(species,sex) ran successfully at 2024-02-12 16:23:05.760947\"               #> [4] \"OK! filter(sex != \\\"male\\\") ran successfully at 2024-02-12 16:23:05.760807\"             #> [5] \"OK! summarise(mean(mass, na.rm = TRUE)) ran successfully at 2024-02-12 16:23:05.760647\" #> [6] \"Total running time: 0.127200126647949 secs\" pick(output, \"value\") #> Error in `pick()`: #> ! Must only be used inside data-masking verbs like `mutate()`, `filter()`, and #>   `group_by()`. output_pipe <- starwars %>%   r_select(height, mass, species, sex) %>=%   r_group_by(species, sex) %>=%   r_filter(sex != \"male\") %>=%   r_summarise(mean_mass = mean(mass, na.rm = TRUE)) pick(output_pipe, \"value\") #> Error in `pick()`: #> ! Must only be used inside data-masking verbs like `mutate()`, `filter()`, and #>   `group_by()`."},{"path":"https://b-rodrigues.github.io/chronicler/index.html","id":"condition-handling","dir":"","previous_headings":"","what":"Condition handling","title":"Add Logging To Functions","text":"default, errors warnings get caught composed log: Reading log tells function failed, error message: also possible capture errors, capture errors, warnings messages using strict parameter record()","code":"errord_output <- starwars %>%   r_select(height, mass, species, sex) %>=%    r_group_by(species, sx) %>=% # typo, \"sx\" instead of \"sex\"   r_filter(sex != \"male\") %>=%   r_summarise(mass = mean(mass, na.rm = TRUE)) errord_output #> NOK! Value computed unsuccessfully: #> --------------- #> Nothing #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). read_log(errord_output) #> [1] \"Complete log:\"                                                                                                                                                               #> [2] \"OK! select(height,mass,species,sex) ran successfully at 2024-02-12 16:23:05.937587\"                                                                                          #> [3] \"NOK! group_by(species,sx) ran unsuccessfully with following exception: Must group by variables found in `.data`.\\n✖ Column `sx` is not found. at 2024-02-12 16:23:05.952245\" #> [4] \"NOK! filter(sex != \\\"male\\\") ran unsuccessfully with following exception: Pipeline failed upstream at 2024-02-12 16:23:05.983855\"                                            #> [5] \"NOK! summarise(mean(mass, na.rm = TRUE)) ran unsuccessfully with following exception: Pipeline failed upstream at 2024-02-12 16:23:05.989377\"                                #> [6] \"Total running time: 0.0302259922027588 secs\" # Only errors:  r_sqrt <- record(sqrt, strict = 1)  r_sqrt(-10) |>   read_log() #> Warning in .f(...): NaNs produced #> [1] \"Complete log:\"                                             #> [2] \"OK! sqrt() ran successfully at 2024-02-12 16:23:06.013692\" #> [3] \"Total running time: 0.000300168991088867 secs\"  # Errors and warnings:  r_sqrt <- record(sqrt, strict = 2)  r_sqrt(-10) |>   read_log() #> [1] \"Complete log:\"                                                                                        #> [2] \"NOK! sqrt() ran unsuccessfully with following exception: NaNs produced at 2024-02-12 16:23:06.020969\" #> [3] \"Total running time: 0.000262975692749023 secs\"  # Errors, warnings and messages  my_f <- function(x){   message(\"this is a message\")   10 }  record(my_f, strict = 3)(10) |>                          read_log() #> [1] \"Complete log:\"                                                                                              #> [2] \"NOK! my_f() ran unsuccessfully with following exception: this is a message\\n at 2024-02-12 16:23:06.027702\" #> [3] \"Total running time: 0.000387668609619141 secs\""},{"path":"https://b-rodrigues.github.io/chronicler/index.html","id":"advanced-logging","dir":"","previous_headings":"","what":"Advanced logging","title":"Add Logging To Functions","text":"can provide function record(), evaluated output. makes possible , example, monitor size data frame throughout pipeline: $log_df element chronicle object contains detailed information: thus possible take look output function provided (dim()) using check_g(): can see dimension dataframe (87, 4) call select(), (23, 4) call filter() finally (9, 3) call summarise(). Another possibility advanced logging use diff argument record, defaults “none”. Setting “full” provides, step workflow, diff input output: Let’s compare input output r_filter(sex != \"male\"): familiar version control software Git, problem reading output. input data frame 87 rows 4 columns, output 23 rows. Rows input, got removed output, highlighted (terminal, , due color scheme). diff set “summary”, summary provided: combining .g diff, possible clear overview happened first input throughout pipeline. diff functionality provided diffobj package.","code":"r_group_by <- record(group_by) r_select <- record(select, .g = dim) r_summarise <- record(summarise, .g = dim) r_filter <- record(filter, .g = dim)  output_pipe <- starwars %>%   r_select(height, mass, species, sex) %>=%   r_group_by(species, sex) %>=%   r_filter(sex != \"male\") %>=%   r_summarise(mass = mean(mass, na.rm = TRUE)) pick(output_pipe, \"log_df\") #> Error in `pick()`: #> ! Must only be used inside data-masking verbs like `mutate()`, `filter()`, and #>   `group_by()`. check_g(output_pipe) #>   ops_number  function     g #> 1          1    select 87, 4 #> 2          2  group_by    NA #> 3          3    filter 23, 4 #> 4          4 summarise  9, 3 r_group_by <- record(group_by) r_select <- record(select, diff = \"full\") r_summarise <- record(summarise, diff = \"full\") r_filter <- record(filter, diff = \"full\")  output_pipe <- starwars %>%   r_select(height, mass, species, sex) %>=%   r_group_by(species, sex) %>=%   r_filter(sex != \"male\") %>=%   r_summarise(mass = mean(mass, na.rm = TRUE)) # The following line generates a data frame with columns `ops_number`, `function` and `diff_obj` # it is possible to filter on the step of interest using the `ops_number` or the `function` column diff_pipe <- check_diff(output_pipe)  diff_pipe %>%   filter(`function` == \"filter\") %>%  # <- backticks around `function` are required   pull(diff_obj) #> [[1]] r_group_by <- record(group_by) r_select <- record(select, diff = \"summary\") r_summarise <- record(summarise, diff = \"summary\") r_filter <- record(filter, diff = \"summary\")  output_pipe <- starwars %>%   r_select(height, mass, species, sex) %>=%   r_group_by(species, sex) %>=%   r_filter(sex != \"male\") %>=%   r_summarise(mass = mean(mass, na.rm = TRUE))  diff_pipe <- check_diff(output_pipe)  diff_pipe %>%   filter(`function` == \"filter\") %>%  # <- backticks around `function` are required   pull(diff_obj) #> [[1]]"},{"path":"https://b-rodrigues.github.io/chronicler/index.html","id":"recording-ggplot","dir":"","previous_headings":"","what":"Recording ggplot","title":"Add Logging To Functions","text":"package provides record() implementation ggplot2 called record_ggplot(). separate function two main reasons: ggplot specifications composed multiple function calls. ggplot specifications lazily evaluated, meaning errors aren’t thrown immediately. example: error thrown force evaluation, example printing plot_1. function record_ggplot() takes ggplot specification first argument. can also take strict argument mentioned . output function record():","code":"# Notice the double \"g\" in \"mpgg\"  plot_1 <- ggplot(data = mtcars) + geom_point(aes(y = hp, x = mpgg)) # The error is not thrown here due to ggplot's lazy evaluation r_plot_1 <- record_ggplot(ggplot(data = mtcars) + geom_point(aes(y = hp, x = mpg))) #> Error in record_ggplot(ggplot(data = mtcars) + geom_point(aes(y = hp, : could not find function \"record_ggplot\" pick(r_plot_1, \"value\") #> Error in `pick()`: #> ! Must only be used inside data-masking verbs like `mutate()`, `filter()`, and #>   `group_by()`. read_log(r_plot_1) #> Error in eval(expr, envir, enclos): object 'r_plot_1' not found"},{"path":"https://b-rodrigues.github.io/chronicler/index.html","id":"thanks","dir":"","previous_headings":"","what":"Thanks","title":"Add Logging To Functions","text":"’d like thank armcn, Kupac blog posts () packages (maybe) inspired build package. Thank well TimTeaFan help writing %>=% infix operator, nigrahamuk showing nice way catch errors, finally Mwavu pointing towards right direction issue ’ve started working package. Thanks Putosaure designing hex logo.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/as_chronicle.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object to a chronicle object. — as_chronicle","title":"Coerce an object to a chronicle object. — as_chronicle","text":"Coerce object chronicle object.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/as_chronicle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object to a chronicle object. — as_chronicle","text":"","code":"as_chronicle(.x, .log_df = data.frame())"},{"path":"https://b-rodrigues.github.io/chronicler/reference/as_chronicle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object to a chronicle object. — as_chronicle","text":".x object. .log_df Used internally, user need interact . Defaults empty data frame.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/as_chronicle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object to a chronicle object. — as_chronicle","text":"Returns chronicle object object $value.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/as_chronicle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object to a chronicle object. — as_chronicle","text":"","code":"as_chronicle(3) #> OK! Value computed successfully: #> --------------- #> Just #> [1] 3 #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). #>"},{"path":"https://b-rodrigues.github.io/chronicler/reference/avia.html","id":null,"dir":"Reference","previous_headings":"","what":"avia\nAir passenger transport between the main airports of Luxembourg and their main partner airports — avia","title":"avia\nAir passenger transport between the main airports of Luxembourg and their main partner airports — avia","text":"non-tidy dataset EUROSTAT can found .","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/avia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"avia\nAir passenger transport between the main airports of Luxembourg and their main partner airports — avia","text":"","code":"avia"},{"path":"https://b-rodrigues.github.io/chronicler/reference/avia.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"avia\nAir passenger transport between the main airports of Luxembourg and their main partner airports — avia","text":"data frame 1,434 rows 332 columns.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/bind_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a decorated function; used to chain multiple decorated functions. — bind_record","title":"Evaluate a decorated function; used to chain multiple decorated functions. — bind_record","text":"Evaluate decorated function; used chain multiple decorated functions.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/bind_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a decorated function; used to chain multiple decorated functions. — bind_record","text":"","code":"bind_record(.c, .f, ...)"},{"path":"https://b-rodrigues.github.io/chronicler/reference/bind_record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a decorated function; used to chain multiple decorated functions. — bind_record","text":".c chronicle object. .f chronicle function apply returning value .c. ... parameters pass .f.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/bind_record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a decorated function; used to chain multiple decorated functions. — bind_record","text":"chronicle object.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/bind_record.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a decorated function; used to chain multiple decorated functions. — bind_record","text":"","code":"r_sqrt <- record(sqrt) r_exp <- record(exp) 3 |> r_sqrt() |> bind_record(r_exp) #> OK! Value computed successfully: #> --------------- #> Just #> [1] 5.652234 #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). #>"},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the output of the diff column — check_diff","title":"Check the output of the diff column — check_diff","text":"Check output diff column","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the output of the diff column — check_diff","text":"","code":"check_diff(.c, columns = c(\"ops_number\", \"function\"))"},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the output of the diff column — check_diff","text":".c chronicle object. columns Columns select output. Defaults c(\"ops_number\", \"function\").","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the output of the diff column — check_diff","text":"data.frame selected columns column \"diff_obj\".","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the output of the diff column — check_diff","text":"diff option argument record() function. diff = \"full\", diff input output decorated function gets saved, diff = \"summary\" summary diff saved.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the output of the diff column — check_diff","text":"","code":"r_subset <- record(subset, diff = \"full\") result <- r_subset(mtcars, select = am) check_diff(result) # <- this is the data frame listing the operations and the accompanying diffs #>   ops_number function                                            diff_obj #> 1          1   subset <S4 class ‘Diff’ [package “diffobj”] with 14 slots> check_diff(result)$diff_obj # <- actually look at the diffs #> [[1]] #> < str(input)                             > str(output)                           #> @@ 1,12 @@                               @@ 1,2 @@                               #> < 'data.frame':   32 obs. of  11 variab  > 'data.frame':   32 obs. of  1 variabl #> : les:                                   : e:                                    #> <  $ mpg : num  21 21 22.8 21.4 18.7 18  ~                                       #> : .1 14.3 24.4 22.8 19.2 ...             ~                                       #> <  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...  ~                                       #> <  $ disp: num  160 160 108 258 360 ...  ~                                       #> <  $ hp  : num  110 110 93 110 175 105   ~                                       #> : 245 62 95 123 ...                      ~                                       #> <  $ drat: num  3.9 3.9 3.85 3.08 3.15   ~                                       #> : 2.76 3.21 3.69 3.92 3.92 ...           ~                                       #> <  $ wt  : num  2.62 2.88 2.32 3.21 3.4  ~                                       #> : 4 ...                                  ~                                       #> <  $ qsec: num  16.5 17 18.6 19.4 17 ..  ~                                       #> : .                                      ~                                       #> <  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...  ~                                       #>    $ am  : num  1 1 1 0 0 0 0 0 0 0 ...     $ am: num  1 1 1 0 0 0 0 0 0 0 ...   #> <  $ gear: num  4 4 4 3 3 3 3 4 4 4 ...  ~                                       #> <  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...  ~                                       #>"},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_g.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the output of the .g function — check_g","title":"Check the output of the .g function — check_g","text":"Check output .g function","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the output of the .g function — check_g","text":"","code":"check_g(.c, columns = c(\"ops_number\", \"function\"))"},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the output of the .g function — check_g","text":".c chronicle object. columns Columns select output. Defaults c(\"ops_number\", \"function\").","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_g.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the output of the .g function — check_g","text":"data.frame selected columns column \"g\".","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_g.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the output of the .g function — check_g","text":".g option argument record() function. Providing optional function allows , step pipeline, monitor interesting characteristics value object. See package's Readme file example data frames.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/check_g.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the output of the .g function — check_g","text":"","code":"r_subset <- record(subset, .g = dim) result <- r_subset(mtcars, select = am) check_g(result) #>   ops_number function     g #> 1          1   subset 32, 1"},{"path":"https://b-rodrigues.github.io/chronicler/reference/flatten_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten nested chronicle objects — flatten_record","title":"Flatten nested chronicle objects — flatten_record","text":"Flatten nested chronicle objects","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/flatten_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten nested chronicle objects — flatten_record","text":"","code":"flatten_record(.c)"},{"path":"https://b-rodrigues.github.io/chronicler/reference/flatten_record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten nested chronicle objects — flatten_record","text":".c nested chronicle object, $value element chronicle object","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/flatten_record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten nested chronicle objects — flatten_record","text":"Returns .c value actual value, logs concatenated.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/flatten_record.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten nested chronicle objects — flatten_record","text":"","code":"r_sqrt <- record(sqrt) r_log <- record(log) a <- as_chronicle(r_log(10)) a #> OK! Value computed successfully: #> --------------- #> Just #> OK! Value computed successfully: #> --------------- #> Just #> [1] 2.302585 #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). #>  #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). #>  flatten_record(a) #> OK! Value computed successfully: #> --------------- #> Just #> [1] 2.302585 #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). #>"},{"path":"https://b-rodrigues.github.io/chronicler/reference/fmap_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a non-chronicle function on a chronicle object. — fmap_record","title":"Evaluate a non-chronicle function on a chronicle object. — fmap_record","text":"Evaluate non-chronicle function chronicle object.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/fmap_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a non-chronicle function on a chronicle object. — fmap_record","text":"","code":"fmap_record(.c, .f, ...)"},{"path":"https://b-rodrigues.github.io/chronicler/reference/fmap_record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a non-chronicle function on a chronicle object. — fmap_record","text":".c chronicle object. .f non-chronicle function. ... parameters pass .f.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/fmap_record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a non-chronicle function on a chronicle object. — fmap_record","text":"Returns result .f(.c$value) new chronicle object.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/fmap_record.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a non-chronicle function on a chronicle object. — fmap_record","text":"","code":"as_chronicle(3) |> fmap_record(sqrt) #> OK! Value computed successfully: #> --------------- #> Just #> [1] 1.732051 #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). #>"},{"path":"https://b-rodrigues.github.io/chronicler/reference/grapes-greater-than-equals-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe a chronicle object to a decorated function. — %>=%","title":"Pipe a chronicle object to a decorated function. — %>=%","text":"Pipe chronicle object decorated function.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/grapes-greater-than-equals-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe a chronicle object to a decorated function. — %>=%","text":"","code":".c %>=% .f"},{"path":"https://b-rodrigues.github.io/chronicler/reference/grapes-greater-than-equals-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe a chronicle object to a decorated function. — %>=%","text":".c value returned record. .f chronicle function apply returning value .c.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/grapes-greater-than-equals-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe a chronicle object to a decorated function. — %>=%","text":"chronicle object.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/grapes-greater-than-equals-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe a chronicle object to a decorated function. — %>=%","text":"","code":"r_sqrt <- record(sqrt) r_exp <- record(exp) 3 |> r_sqrt() %>=% r_exp() #> OK! Value computed successfully: #> --------------- #> Just #> [1] 5.652234 #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). #>"},{"path":"https://b-rodrigues.github.io/chronicler/reference/is_chronicle.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether an object is of class ","title":"Checks whether an object is of class ","text":"Checks whether object class \"chronicle\"","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/is_chronicle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether an object is of class ","text":"","code":"is_chronicle(.x)"},{"path":"https://b-rodrigues.github.io/chronicler/reference/is_chronicle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether an object is of class ","text":".x object test.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/is_chronicle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether an object is of class ","text":"TRUE .x class \"chronicle\", FALSE .","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve an element from a chronicle object. — pick","title":"Retrieve an element from a chronicle object. — pick","text":"Retrieve element chronicle object.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve an element from a chronicle object. — pick","text":"","code":"pick(.c, .e)"},{"path":"https://b-rodrigues.github.io/chronicler/reference/pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve an element from a chronicle object. — pick","text":".c chronicle object. .e Element interest retrieve, one \"value\" \"log_df\".","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/pick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve an element from a chronicle object. — pick","text":"value log_df element chronicle object .c.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/pick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve an element from a chronicle object. — pick","text":"","code":"r_sqrt <- record(sqrt) r_exp <- record(exp) 3 |> r_sqrt() %>=% r_exp() |> pick(\"value\") #> [1] 5.652234"},{"path":"https://b-rodrigues.github.io/chronicler/reference/print.chronicle.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for chronicle objects. — print.chronicle","title":"Print method for chronicle objects. — print.chronicle","text":"Print method chronicle objects.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/print.chronicle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for chronicle objects. — print.chronicle","text":"","code":"# S3 method for chronicle print(x, ...)"},{"path":"https://b-rodrigues.github.io/chronicler/reference/print.chronicle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for chronicle objects. — print.chronicle","text":"x chronicle object. ... Unused.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/print.chronicle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for chronicle objects. — print.chronicle","text":"return value, called side effects (printing object screen).","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/print.chronicle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print method for chronicle objects. — print.chronicle","text":"chronicle object , core, lists following elements: \"$value\": object type maybe containing result computation (see \"Maybe monad\" vignette details maybes). \"$log_df\": data.frame object containing printed object’s log information. print.chronicle() prints object screen shows: value using print() method (example, value data.frame, print.data.frame() used) message indicating user recuperate value inside chronicle object read object’s log","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/purely.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture all errors, warnings and messages. — purely","title":"Capture all errors, warnings and messages. — purely","text":"Capture errors, warnings messages.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/purely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture all errors, warnings and messages. — purely","text":"","code":"purely(.f, strict = 2)"},{"path":"https://b-rodrigues.github.io/chronicler/reference/purely.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture all errors, warnings and messages. — purely","text":".f function decorate. strict Controls decorated function catch errors (1), errors warnings (2, default) errors, warnings messages (3).","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/purely.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture all errors, warnings and messages. — purely","text":"function returns list. first element list, $value, result original function .f applied inputs. second element, $log NULL case everything goes well. case error/warning/message, $value NA $log holds message. purely() used record() allow latter handle errors.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/purely.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capture all errors, warnings and messages. — purely","text":"","code":"purely(log)(10) #> $value #> Just #> [1] 2.302585 #>  #> $log_df #> [1] NA #>  purely(log)(-10) #> $value #> Nothing #>  #> $log_df #> [1] \"NaNs produced\" #>  purely(log, strict = 1)(-10) # This produces a warning, so with strict = 1 nothing gets captured. #> Warning: NaNs produced #> $value #> Just #> [1] NaN #>  #> $log_df #> [1] NA #>"},{"path":"https://b-rodrigues.github.io/chronicler/reference/read_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads the log of a chronicle. — read_log","title":"Reads the log of a chronicle. — read_log","text":"Reads log chronicle.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/read_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads the log of a chronicle. — read_log","text":"","code":"read_log(.c)"},{"path":"https://b-rodrigues.github.io/chronicler/reference/read_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads the log of a chronicle. — read_log","text":".c chronicle object.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/read_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads the log of a chronicle. — read_log","text":"log object.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/read_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads the log of a chronicle. — read_log","text":"","code":"if (FALSE) { read_log(chronicle_object) }"},{"path":"https://b-rodrigues.github.io/chronicler/reference/record.html","id":null,"dir":"Reference","previous_headings":"","what":"Decorates a function to output objects of type chronicle. — record","title":"Decorates a function to output objects of type chronicle. — record","text":"Decorates function output objects type chronicle.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decorates a function to output objects of type chronicle. — record","text":"","code":"record(.f, .g = (function(x) NA), strict = 2, diff = \"none\")"},{"path":"https://b-rodrigues.github.io/chronicler/reference/record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decorates a function to output objects of type chronicle. — record","text":".f function decorate. .g Optional. function apply intermediary results monitoring purposes. Defaults returning NA. strict Controls decorated function catch errors (1), errors warnings (2, default) errors, warnings messages (3). diff Whether show diff input output (\"full\"), just summary diff (\"summary\"), none (\"none\", default)","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decorates a function to output objects of type chronicle. — record","text":"function returns objects type chronicle. chronicle objects carry several elements: value result function evaluated inputs second object called log_df. log_df contains logging information, can read using read_log(). log_df data frame columns: outcome, function, arguments, message, start_time, end_time, run_time, g diff_obj.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decorates a function to output objects of type chronicle. — record","text":"chain multiple decorated function, use bind_record() %>=%. diff parameter set \"full\", diffobj::diffObj() (diffobj::summary(diffobj::diffObj(), diff set \"summary\") gets used provide diff input output. diff can found log_df element result, can viewed using check_diff().","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decorates a function to output objects of type chronicle. — record","text":"","code":"record(sqrt)(10) #> OK! Value computed successfully: #> --------------- #> Just #> [1] 3.162278 #>  #> --------------- #> This is an object of type `chronicle`. #> Retrieve the value of this object with pick(.c, \"value\"). #> To read the log of this object, call read_log(.c). #>"},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Record ggplot — record_ggplot","title":"Record ggplot — record_ggplot","text":"record_ggplot takes ggplot_expression optional strict argument input following steps: Records ggplot_fun function given strict argument using record function chronicler Passes ggplot_expression recorded ggplot_fun function Returns result recorded ggplot_fun function","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record ggplot — record_ggplot","text":"","code":"record_ggplot(ggplot_expression, strict = 2)"},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record ggplot — record_ggplot","text":"ggplot_expression ggplot expression. strict optional integer argument controlling behavior record() function chronicler. Default 2.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record ggplot — record_ggplot","text":"chronicler object.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Record ggplot — record_ggplot","text":"","code":"if (FALSE) { library(ggplot2) # Unsuccessful example x <- record_ggplot(ggplot(data = mtcars) + geom_point(aes(y = hp, x = mpgg))) print(x)  # Successful example z <- record_ggplot(ggplot(data = mtcars) + geom_point(aes(y = hp, x = mpg))) print(z) }"},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_many.html","id":null,"dir":"Reference","previous_headings":"","what":"Decorate a list of functions — record_many","title":"Decorate a list of functions — record_many","text":"Decorate list functions","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_many.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decorate a list of functions — record_many","text":"","code":"record_many(list_funcs, .g = (function(x) NA), strict = 2, diff = \"none\")"},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_many.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decorate a list of functions — record_many","text":"list_funcs list function names, strings. .g Optional. Defaults function returns NA. strict Controls decorated function catch errors (1), errors warnings (2, default) errors, warnings messages (3). diff Whether show diff input output (\"full\"), just summary diff (\"summary\"), none (\"none\", default)","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_many.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decorate a list of functions — record_many","text":"Puts string systems clipboard.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_many.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decorate a list of functions — record_many","text":"Functions must entered strings form \"function\" \"package::function\". code gets generated copied clipboard. code can pasted text editor. GNU/Linux systems, might get following error message first use: \"Error : Clipboard X11 requires DISPLAY envvar configured\". error message clipr::write_clip(), used record_many() put generated code system's clipboard. solve issue, run echo $DISPLAY system's shell. command return string like \":0\". Take note string. .Rprofile, put following command: Sys.setenv(DISPLAY = \":0\") restart R session. record_many() now work.","code":""},{"path":"https://b-rodrigues.github.io/chronicler/reference/record_many.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decorate a list of functions — record_many","text":"","code":"if (FALSE) { list_funcs <- list(\"exp\", \"dplyr::select\", \"exp\") record_many(list_funcs) }"},{"path":"https://b-rodrigues.github.io/chronicler/news/index.html","id":"chronicler-021","dir":"Changelog","previous_headings":"","what":"chronicler 0.2.1","title":"chronicler 0.2.1","text":"CRAN release: 2023-02-03","code":""},{"path":"https://b-rodrigues.github.io/chronicler/news/index.html","id":"maintenance-release-0-2-1","dir":"Changelog","previous_headings":"","what":"Maintenance release","title":"chronicler 0.2.1","text":"Compatibility dplyr 1.1.0 Changed link canonical link Readme.md","code":""},{"path":"https://b-rodrigues.github.io/chronicler/news/index.html","id":"chronicler-020","dir":"Changelog","previous_headings":"","what":"chronicler 0.2.0","title":"chronicler 0.2.0","text":"CRAN release: 2022-05-17","code":""},{"path":"https://b-rodrigues.github.io/chronicler/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"chronicler 0.2.0","text":"First CRAN release","code":""}]
